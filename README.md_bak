–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç **–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown**, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ `README.md` –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π `.md` —Ñ–∞–π–ª.

---

# üß© –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è React + Apache APISIX + Keycloak + FastAPI

–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Keycloak, –∑–∞—â–∏—Ç–æ–π API —á–µ—Ä–µ–∑ APISIX –∏ –±—ç–∫–µ–Ω–¥–æ–º –Ω–∞ FastAPI.

---

## üì¶ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞

```
React (–ø–æ—Ä—Ç 3000) 
   ‚Üí APISIX (–ø–æ—Ä—Ç 9080) 
      ‚Üí FastAPI (–ø–æ—Ä—Ç 8000) 
         ‚Üê Keycloak (–ø–æ—Ä—Ç 8080)
```

---

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
project/
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ apisix_config/
‚îÇ   ‚îî‚îÄ‚îÄ config.yaml
‚îú‚îÄ‚îÄ fastapi/
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ react/
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îî‚îÄ‚îÄ plugins/
    ‚îî‚îÄ‚îÄ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã APISIX)
```

---

## üì¶ 1. Docker Compose

```yaml
version: '3.8'

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
    command: ["start-dev"]

  apisix:
    image: apache/apisix:3.0.0-debian
    ports:
      - "9080:9080"
      - "9180:9180" # Admin API
    volumes:
      - ./apisix_config:/usr/local/apisix/conf
      - ./plugins:/usr/local/apisix/plugins
    depends_on:
      - keycloak

  fastapi:
    image: my-fastapi
    build: ./fastapi
    ports:
      - "8000:8000"
    depends_on:
      - apisix

  react-app:
    image: my-react
    build: ./react
    ports:
      - "3000:3000"
    depends_on:
      - keycloak
```

---

## üîê 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: `http://localhost:8080`
2. –í–æ–π–¥–∏—Ç–µ:  
   - –õ–æ–≥–∏–Ω: `admin`  
   - –ü–∞—Ä–æ–ª—å: `admin`
3. –°–æ–∑–¥–∞–π—Ç–µ Realm: `myrealm`
4. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç: `fastapi-client`
   - **Client Protocol**: `openid-connect`
   - **Access Type**: `confidential`
   - **Valid Redirect URIs**: `http://localhost:3000/*`
   - **Web Origins**: `http://localhost:3000`
   - –í–∫–ª—é—á–∏—Ç–µ: `Authorization Enabled`, `Service Accounts Enabled`
5. –ü–æ–ª—É—á–∏—Ç–µ **Client Secret** –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Credentials

---

## üåê 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Apache APISIX

–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É `./apisix_config` –∏ —Ñ–∞–π–ª `config.yaml`:

```yaml
apisix:
  node_ip: 0.0.0.0
  port_admin: 9180
  ssl:
    ssl_trusted_certificate: /usr/local/apisix/conf/myrealm.crt
routes:
  -
    uri: /api/*
    upstream:
      type: roundrobin
      nodes:
        "fastapi:8000": 1
    plugins:
      openid-connect:
        client_id: fastapi-client
        client_secret: <–≤–∞—à-–∫–ª—é—á-–æ—Ç-keycloak>
        discovery: http://keycloak:8080/realms/myrealm/.well-known/openid-configuration
        scope: openid profile
        bearer_only: true
        realm: myrealm
```

> üîê –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ `client_secret` –∏–∑ Keycloak.

---

## üß™ 4. FastAPI ‚Äî –±—ç–∫–µ–Ω–¥

–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É `./fastapi` –∏ —Ñ–∞–π–ª `main.py`:

```python
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, jwk
from jose.utils import base64url_decode
import requests

app = FastAPI()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ Keycloak
KEYCLOAK_PUBLIC_KEY_URL = "http://keycloak:8080/realms/myrealm"

def get_public_key():
    response = requests.get(KEYCLOAK_PUBLIC_KEY_URL)
    public_key = "-----BEGIN PUBLIC KEY-----\n" + response.json()["public_key"] + "\n-----END PUBLIC KEY-----"
    return public_key

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
def verify_token(token: str):
    public_key = get_public_key()
    try:
        payload = jwt.decode(token, public_key, algorithms=["RS256"], audience="fastapi-client")
        return payload
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Invalid token: {e}")

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/api/protected")
def protected_route(token: str = Depends(oauth2_scheme)):
    user_info = verify_token(token)
    return {"message": "Access granted", "user": user_info}
```

`requirements.txt`:

```
fastapi
uvicorn
python-jose[cryptography]
requests
```

`Dockerfile`:

```dockerfile
FROM python:3.10

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

---

## üñ•Ô∏è 5. React ‚Äî —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:

```bash
npm install keycloak-js react-keycloak-web
```

### `auth.js` ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak:

```javascript
import Keycloak from 'keycloak-js';

const keycloak = new Keycloak({
  url: 'http://localhost:8080/auth',
  realm: 'myrealm',
  clientId: 'fastapi-client'
});

export default keycloak;
```

### `App.js` ‚Äî –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

```javascript
import React, { useEffect, useState } from 'react';
import keycloak from './auth';

function App() {
  const [token, setToken] = useState(null);
  const [data, setData] = useState(null);

  useEffect(() => {
    keycloak.init({ onLoad: 'login-required' }).then(authenticated => {
      if (authenticated) {
        setToken(keycloak.token);
      }
    });
  }, []);

  const fetchProtected = async () => {
    const res = await fetch('http://localhost:9080/api/protected', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    const json = await res.json();
    setData(json);
  };

  return (
    <div>
      <h1>React + Keycloak + APISIX + FastAPI</h1>
      <button onClick={fetchProtected}>Fetch Protected Data</button>
      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
    </div>
  );
}

export default App;
```

### `index.js`:

```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import keycloak from './auth';
import { ReactKeycloakProvider } from '@react-keycloak/web';

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <ReactKeycloakProvider authClient={keycloak}>
    <App />
  </ReactKeycloakProvider>
);
```

---

## üõ°Ô∏è 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

### 6.1. CORS –≤ FastAPI

```python
from fastapi.middleware import Middleware
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

### 6.2. Dockerfile –¥–ª—è React

```dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .
CMD ["npm", "start"]
```

---

## üß™ 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å—ë —á–µ—Ä–µ–∑ Docker Compose:

```bash
docker-compose up -d --build
```

2. –û—Ç–∫—Ä–æ–π—Ç–µ `http://localhost:3000`
3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ Keycloak –¥–ª—è –≤—Ö–æ–¥–∞.
4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Fetch Protected Data"
5. –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ APISIX –Ω–∞ FastAPI –∏ –≤–µ—Ä–Ω–µ—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω.

------
Run 
```
docker-compose up -d --build
```

Open http://localhost:3000 in your browser

Login with Keycloak (admin/admin)

Click "Fetch Protected Data" to test the API
